// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: nodeclient/nodeclientproto/protos/nodeclient.proto

package nodeclientproto

import (
	bytes "bytes"
	context "context"
	errors "errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_nodeclient_nodeclientproto_protos_nodeclient_proto struct{}

func (drpcEncoding_File_nodeclient_nodeclientproto_protos_nodeclient_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_nodeclient_nodeclientproto_protos_nodeclient_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_nodeclient_nodeclientproto_protos_nodeclient_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_nodeclient_nodeclientproto_protos_nodeclient_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCNodeClientClient interface {
	DRPCConn() drpc.Conn

	AclAdd(ctx context.Context, in *AclAddRequest) (*AclAddResponse, error)
}

type drpcNodeClientClient struct {
	cc drpc.Conn
}

func NewDRPCNodeClientClient(cc drpc.Conn) DRPCNodeClientClient {
	return &drpcNodeClientClient{cc}
}

func (c *drpcNodeClientClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcNodeClientClient) AclAdd(ctx context.Context, in *AclAddRequest) (*AclAddResponse, error) {
	out := new(AclAddResponse)
	err := c.cc.Invoke(ctx, "/anyNodeClient.NodeClient/AclAdd", drpcEncoding_File_nodeclient_nodeclientproto_protos_nodeclient_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCNodeClientServer interface {
	AclAdd(context.Context, *AclAddRequest) (*AclAddResponse, error)
}

type DRPCNodeClientUnimplementedServer struct{}

func (s *DRPCNodeClientUnimplementedServer) AclAdd(context.Context, *AclAddRequest) (*AclAddResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCNodeClientDescription struct{}

func (DRPCNodeClientDescription) NumMethods() int { return 1 }

func (DRPCNodeClientDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/anyNodeClient.NodeClient/AclAdd", drpcEncoding_File_nodeclient_nodeclientproto_protos_nodeclient_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNodeClientServer).
					AclAdd(
						ctx,
						in1.(*AclAddRequest),
					)
			}, DRPCNodeClientServer.AclAdd, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterNodeClient(mux drpc.Mux, impl DRPCNodeClientServer) error {
	return mux.Register(impl, DRPCNodeClientDescription{})
}

type DRPCNodeClient_AclAddStream interface {
	drpc.Stream
	SendAndClose(*AclAddResponse) error
}

type drpcNodeClient_AclAddStream struct {
	drpc.Stream
}

func (x *drpcNodeClient_AclAddStream) SendAndClose(m *AclAddResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_nodeclient_nodeclientproto_protos_nodeclient_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
